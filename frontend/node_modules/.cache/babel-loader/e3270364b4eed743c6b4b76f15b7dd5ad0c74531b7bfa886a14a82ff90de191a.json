{"ast":null,"code":"var _jsxFileName = \"/Users/atharvakerkar/Documents/Summer Project/top/frontend/src/components/TextAppear.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './TextAppear.css';\nimport TermHeader from './TerminalHeader.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextAppear({\n  commands = [],\n  onComplete\n}) {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [texts, setTexts] = useState([]); // Store all completed texts\n  const [currentText, setCurrentText] = useState(''); // Text being typed out\n  const [isExpanded, setIsExpanded] = useState(false); // Start with false for animation\n  const [cursorPosition, setCursorPosition] = useState({\n    left: 0,\n    top: 0\n  });\n  const [headerTitle, setHeaderTitle] = useState('atharvakerkar@pal-nat'); // Initial header title\n  const [directory, setDirectory] = useState('$ '); // Initial directory\n  const [isComplete, setIsComplete] = useState(false); // New state to track completion\n  const textRef = useRef(null);\n  const intervalRef = useRef(null);\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Helper function for delay\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n  useEffect(() => {\n    if (isComplete) {\n      console.log('Terminal processing complete. Collapsing terminal...');\n      setTimeout(() => {\n        setIsExpanded(false); // Collapse the terminal\n      }, 10); // Optional delay to show a brief \"complete\" state\n    }\n  }, [isComplete]);\n  useEffect(() => {\n    // Delay the expansion of the wrapper to trigger animation\n    const timer = setTimeout(() => {\n      console.log(\"expanding\");\n      setIsExpanded(true); // After a small delay, set expanded to true\n    }, 300); // 100ms delay (adjust if needed)\n    return () => clearTimeout(timer); // Clean up the timeout\n  }, []);\n  const isProcessingRef = useRef(false); // Prevent overlapping execution\n  const prev = useRef(-1); // keeps track of the previous command index\n  useEffect(() => {\n    const processCommand = async () => {\n      if (currentIndex < commands.length && isProcessingRef.current === false && prev.current !== currentIndex) {\n        console.log(prev.current);\n        prev.current = currentIndex;\n        isProcessingRef.current = true; // Lock execution\n        console.log(\"current: \" + currentIndex);\n        const {\n          message = '',\n          type\n        } = commands[currentIndex];\n        if (currentIndex === 3 && commands.length != 10 || currentIndex === 2 && commands.length === 10) {\n          setCurrentText('');\n          setDirectory('atharva@data:~$ ');\n          await delay(800);\n        }\n        if (currentIndex === 4 && commands.length != 10 || currentIndex === 3 && commands.length === 10) {\n          setDirectory('atharva@data:~/atharva/menu$ ');\n        }\n        if (currentIndex === 7 && commands.length != 10 || currentIndex === 6 && commands.length === 10) {\n          await delay(2500);\n        }\n        if (type === 'instant') {\n          setTexts(prev => [...prev, message]);\n          setCurrentIndex(currentIndex + 1); // Move to the next command\n        } else if (type === 'typewriter' && message) {\n          let letterIndex = 0;\n          setCurrentText(directory);\n          clearInterval(intervalRef.current);\n          console.log('typewrite');\n          await typewriterEffect(message); // Use async function for typewriter effect\n          setCurrentIndex(currentIndex + 1);\n          console.log('typewrite');\n        } else if (type === 'clear') {\n          setTexts([]);\n          setCurrentText('$ ');\n          setCurrentIndex(currentIndex + 1);\n          if (currentIndex === commands.length - 1) {\n            setCurrentText('');\n            setIsComplete(true);\n            onComplete();\n          }\n        }\n        if (currentIndex === 3 && commands.length != 10 || currentIndex === 2 && commands.length === 10) {\n          setHeaderTitle('ssh atharva@data');\n        }\n        isProcessingRef.current = false; // Unlock execution\n      }\n    };\n    processCommand();\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [currentIndex, commands]);\n\n  // Helper function to handle typewriter effect with async/await\n  const typewriterEffect = async message => {\n    let letterIndex = 0;\n    setCurrentText(directory); // Set the initial text to the directory\n\n    // Loop through each character and simulate typing\n    for (let letterIndex = 0; letterIndex < message.length; letterIndex++) {\n      setCurrentText(prev => directory + message.slice(0, letterIndex + 1)); // Add one letter at a time\n      await new Promise(resolve => setTimeout(resolve, 80)); // Wait 90ms between characters\n    }\n\n    // Once all letters are typed, add the full message to the text area\n    setTexts(prev => [...prev, directory + message]);\n    setCurrentText(directory); // Reset the current text after typing finishes\n    if (currentIndex === commands.length - 2) {\n      await delay(400);\n    }\n  };\n  useEffect(() => {\n    if (textRef.current) {\n      // Get the bounding rect of the current text\n      const rect = textRef.current.getBoundingClientRect();\n      const containerRect = textRef.current.parentElement.getBoundingClientRect();\n\n      // Calculate the cursor's vertical position based on the container's padding and text's bounding rect\n      const cursorX = rect.right - containerRect.left - 1; // Horizontal position of the cursor\n      const cursorY = rect.top - containerRect.top; // Adjust vertical position based on container\n\n      setCursorPosition({\n        left: cursorX,\n        top: cursorY\n      });\n    }\n  }, [texts, currentText]);\n  const cursorStyle = {\n    position: 'absolute',\n    left: cursorPosition.left,\n    top: cursorPosition.top,\n    color: 'rgb(54, 229, 150)',\n    animation: 'blink-caret 1s step-start infinite'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `terminal-wrapper ${isExpanded ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(TermHeader, {\n      headerTitle: headerTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-box\",\n      children: [texts.map((t, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0\n        },\n        children: t\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this) // Each command on a new line\n      ), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0,\n          display: 'inline'\n        },\n        ref: textRef,\n        children: [currentText, !isComplete && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cursor\",\n          style: cursorStyle,\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n_s(TextAppear, \"V8wuBz0VXuIWEVE6UtBxVeoMpBY=\");\n_c = TextAppear;\nexport default TextAppear;\nvar _c;\n$RefreshReg$(_c, \"TextAppear\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TermHeader","jsxDEV","_jsxDEV","TextAppear","commands","onComplete","_s","currentIndex","setCurrentIndex","texts","setTexts","currentText","setCurrentText","isExpanded","setIsExpanded","cursorPosition","setCursorPosition","left","top","headerTitle","setHeaderTitle","directory","setDirectory","isComplete","setIsComplete","textRef","intervalRef","isHovered","setIsHovered","delay","ms","Promise","resolve","setTimeout","console","log","timer","clearTimeout","isProcessingRef","prev","processCommand","length","current","message","type","letterIndex","clearInterval","typewriterEffect","slice","rect","getBoundingClientRect","containerRect","parentElement","cursorX","right","cursorY","cursorStyle","position","color","animation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","t","index","style","margin","display","ref","_c","$RefreshReg$"],"sources":["/Users/atharvakerkar/Documents/Summer Project/top/frontend/src/components/TextAppear.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './TextAppear.css';\nimport TermHeader from './TerminalHeader.js';\n\nfunction TextAppear({ commands = [], onComplete }) {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [texts, setTexts] = useState([]); // Store all completed texts\n    const [currentText, setCurrentText] = useState(''); // Text being typed out\n    const [isExpanded, setIsExpanded] = useState(false); // Start with false for animation\n    const [cursorPosition, setCursorPosition] = useState({ left: 0, top: 0 });\n    const [headerTitle, setHeaderTitle] = useState('atharvakerkar@pal-nat'); // Initial header title\n    const [directory, setDirectory] = useState('$ '); // Initial directory\n    const [isComplete, setIsComplete] = useState(false); // New state to track completion\n    const textRef = useRef(null);\n    const intervalRef = useRef(null);\n    const [isHovered, setIsHovered] = useState(false);\n\n\n    // Helper function for delay\n    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n    useEffect(() => {\n        if (isComplete) {\n            console.log('Terminal processing complete. Collapsing terminal...');\n            setTimeout(() => {\n                setIsExpanded(false); // Collapse the terminal\n            }, 10); // Optional delay to show a brief \"complete\" state\n        }\n    }, [isComplete]);    \n\n    useEffect(() => {\n        // Delay the expansion of the wrapper to trigger animation\n        const timer = setTimeout(() => {\n            console.log(\"expanding\")\n            setIsExpanded(true); // After a small delay, set expanded to true\n        }, 300); // 100ms delay (adjust if needed)\n        return () => clearTimeout(timer); // Clean up the timeout\n    }, []);\n\n    const isProcessingRef = useRef(false); // Prevent overlapping execution\n    const prev = useRef(-1); // keeps track of the previous command index\n    useEffect(() => {    \n        const processCommand = async () => {\n            if (currentIndex < commands.length && isProcessingRef.current === false && prev.current !== currentIndex) {\n                console.log(prev.current);\n                prev.current = currentIndex;\n                isProcessingRef.current = true; // Lock execution\n                console.log(\"current: \" + currentIndex);\n                const { message = '', type } = commands[currentIndex];\n\n                if ((currentIndex === 3 && commands.length != 10) || (currentIndex === 2 && commands.length === 10)) {\n                    setCurrentText('');\n                    setDirectory('atharva@data:~$ ');\n                    await delay(800);\n                }\n                \n                if ((currentIndex === 4 && commands.length != 10) || (currentIndex === 3 && commands.length === 10)) {\n                    setDirectory('atharva@data:~/atharva/menu$ ');\n                }\n\n                if ((currentIndex === 7 && commands.length != 10) || (currentIndex === 6 && commands.length === 10)) {\n                    await delay(2500);\n                }\n\n\n                if (type === 'instant') {\n                    setTexts((prev) => [...prev, message]);\n                    setCurrentIndex(currentIndex + 1); // Move to the next command\n                }\n                else if (type === 'typewriter' && message) {\n                    let letterIndex = 0;\n                    setCurrentText(directory);\n                    clearInterval(intervalRef.current);\n                    console.log('typewrite');\n\n                    await typewriterEffect(message); // Use async function for typewriter effect\n                    setCurrentIndex(currentIndex + 1);\n                    console.log('typewrite');\n\n                } else if (type === 'clear') {\n                    setTexts([]);\n                    setCurrentText('$ ');\n                    setCurrentIndex(currentIndex + 1);\n                    if (currentIndex === commands.length - 1) {\n                        setCurrentText('');\n                        setIsComplete(true);\n                        onComplete()\n                    }\n                }\n                if ((currentIndex === 3 && commands.length != 10) || (currentIndex === 2 && commands.length === 10)) {\n                    setHeaderTitle('ssh atharva@data');\n                }\n\n                isProcessingRef.current = false; // Unlock execution\n            }\n        };\n\n        processCommand();\n\n        return () => {\n            if (intervalRef.current) {\n                clearInterval(intervalRef.current);\n            }\n        };\n    }, [currentIndex, commands]);\n\n    // Helper function to handle typewriter effect with async/await\n    const typewriterEffect = async (message) => {\n        let letterIndex = 0;\n        setCurrentText(directory); // Set the initial text to the directory\n\n        // Loop through each character and simulate typing\n        for (let letterIndex = 0; letterIndex < message.length; letterIndex++) {\n            setCurrentText((prev) => directory + message.slice(0, letterIndex + 1)); // Add one letter at a time\n            await new Promise((resolve) => setTimeout(resolve, 80)); // Wait 90ms between characters\n        }\n\n        // Once all letters are typed, add the full message to the text area\n        setTexts((prev) => [...prev, directory + message]);\n        setCurrentText(directory); // Reset the current text after typing finishes\n        if (currentIndex === commands.length - 2) {\n            await delay(400);\n        }\n    };\n\n    \n    useEffect(() => {\n        if (textRef.current) {\n            // Get the bounding rect of the current text\n            const rect = textRef.current.getBoundingClientRect();\n            const containerRect = textRef.current.parentElement.getBoundingClientRect();\n            \n            // Calculate the cursor's vertical position based on the container's padding and text's bounding rect\n            const cursorX = rect.right - containerRect.left - 1;  // Horizontal position of the cursor\n            const cursorY = rect.top - containerRect.top;  // Adjust vertical position based on container\n\n            setCursorPosition({\n                left: cursorX,\n                top: cursorY\n            });\n        }\n    }, [texts, currentText]);\n\n    const cursorStyle = {\n        position: 'absolute',\n        left: cursorPosition.left,\n        top: cursorPosition.top,\n        color: 'rgb(54, 229, 150)',\n        animation: 'blink-caret 1s step-start infinite',\n    };\n\n    return (\n        <div className={`terminal-wrapper ${isExpanded ? 'expanded' : ''}`}>\n            <TermHeader headerTitle={headerTitle} />\n            <div className=\"terminal-box\">\n                {texts.map((t, index) => (\n                    <p key={index} style={{ margin: 0 }}>{t}</p> // Each command on a new line\n                ))}\n                <p style={{ margin: 0, display: 'inline' }} ref={textRef}>\n                    {currentText}\n                    {!isComplete && \n                        (<span \n                            className=\"cursor\" \n                            style={cursorStyle}\n                        >\n                        | \n                        </span>)\n                    }\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default TextAppear;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}