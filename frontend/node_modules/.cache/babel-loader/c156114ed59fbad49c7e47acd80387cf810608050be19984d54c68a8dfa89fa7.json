{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./TextAppear.css';import TermHeader from'./TerminalHeader.js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function TextAppear(_ref){let{commands=[],onComplete}=_ref;const[currentIndex,setCurrentIndex]=useState(0);const[texts,setTexts]=useState([]);// Store all completed texts\nconst[currentText,setCurrentText]=useState('');// Text being typed out\nconst[isExpanded,setIsExpanded]=useState(false);// Start with false for animation\nconst[cursorPosition,setCursorPosition]=useState({left:0,top:0});const[headerTitle,setHeaderTitle]=useState('atharvakerkar@pal-nat');// Initial header title\nconst[directory,setDirectory]=useState('$ ');// Initial directory\nconst[isComplete,setIsComplete]=useState(false);// New state to track completion\nconst textRef=useRef(null);const intervalRef=useRef(null);const[isHovered,setIsHovered]=useState(false);// Helper function for delay\nconst delay=ms=>new Promise(resolve=>setTimeout(resolve,ms));useEffect(()=>{if(isComplete){console.log('Terminal processing complete. Collapsing terminal...');setTimeout(()=>{setIsExpanded(false);// Collapse the terminal\n},10);// Optional delay to show a brief \"complete\" state\n}},[isComplete]);useEffect(()=>{// Delay the expansion of the wrapper to trigger animation\nconst timer=setTimeout(()=>{console.log(\"expanding\");setIsExpanded(true);// After a small delay, set expanded to true\n},300);// 100ms delay (adjust if needed)\nreturn()=>clearTimeout(timer);// Clean up the timeout\n},[]);const isProcessingRef=useRef(false);// Prevent overlapping execution\nconst prev=useRef(-1);// keeps track of the previous command index\nuseEffect(()=>{const processCommand=async()=>{if(currentIndex<commands.length&&isProcessingRef.current===false&&prev.current!==currentIndex){console.log(prev.current);prev.current=currentIndex;isProcessingRef.current=true;// Lock execution\nconsole.log(\"current: \"+currentIndex);const{message='',type}=commands[currentIndex];if(currentIndex===3&&commands.length!=10||currentIndex===2&&commands.length===10){setCurrentText('');setDirectory('atharva@data:~$ ');await delay(800);}if(currentIndex===4&&commands.length!=10||currentIndex===3&&commands.length===10){setDirectory('atharva@data:~/atharva/menu$ ');}if(currentIndex===7&&commands.length!=10||currentIndex===6&&commands.length===10){await delay(2500);}if(type==='instant'){setTexts(prev=>[...prev,message]);setCurrentIndex(currentIndex+1);// Move to the next command\n}else if(type==='typewriter'&&message){let letterIndex=0;setCurrentText(directory);clearInterval(intervalRef.current);console.log('typewrite');await typewriterEffect(message);// Use async function for typewriter effect\nsetCurrentIndex(currentIndex+1);console.log('typewrite');}else if(type==='clear'){setTexts([]);setCurrentText('$ ');setCurrentIndex(currentIndex+1);if(currentIndex===commands.length-1){setCurrentText('');setIsComplete(true);onComplete();}}if(currentIndex===3&&commands.length!=10||currentIndex===2&&commands.length===10){setHeaderTitle('ssh atharva@data');}isProcessingRef.current=false;// Unlock execution\n}};processCommand();return()=>{if(intervalRef.current){clearInterval(intervalRef.current);}};},[currentIndex,commands]);// Helper function to handle typewriter effect with async/await\nconst typewriterEffect=async message=>{let letterIndex=0;setCurrentText(directory);// Set the initial text to the directory\n// Loop through each character and simulate typing\nfor(let letterIndex=0;letterIndex<message.length;letterIndex++){setCurrentText(prev=>directory+message.slice(0,letterIndex+1));// Add one letter at a time\nawait new Promise(resolve=>setTimeout(resolve,80));// Wait 90ms between characters\n}// Once all letters are typed, add the full message to the text area\nsetTexts(prev=>[...prev,directory+message]);setCurrentText(directory);// Reset the current text after typing finishes\nif(currentIndex===commands.length-2){await delay(400);}};useEffect(()=>{if(textRef.current){// Get the bounding rect of the current text\nconst rect=textRef.current.getBoundingClientRect();const containerRect=textRef.current.parentElement.getBoundingClientRect();// Calculate the cursor's vertical position based on the container's padding and text's bounding rect\nconst cursorX=rect.right-containerRect.left-1;// Horizontal position of the cursor\nconst cursorY=rect.top-containerRect.top;// Adjust vertical position based on container\nsetCursorPosition({left:cursorX,top:cursorY});}},[texts,currentText]);const cursorStyle={position:'absolute',left:cursorPosition.left,top:cursorPosition.top,color:'rgb(54, 229, 150)',animation:'blink-caret 1s step-start infinite'};return/*#__PURE__*/_jsxs(\"div\",{className:`terminal-wrapper ${isExpanded?'expanded':''}`,children:[/*#__PURE__*/_jsx(TermHeader,{headerTitle:headerTitle}),/*#__PURE__*/_jsxs(\"div\",{className:\"terminal-box\",children:[texts.map((t,index)=>/*#__PURE__*/_jsx(\"p\",{style:{margin:0},children:t},index)// Each command on a new line\n),/*#__PURE__*/_jsxs(\"p\",{style:{margin:0,display:'inline'},ref:textRef,children:[currentText,!isComplete&&/*#__PURE__*/_jsx(\"span\",{className:\"cursor\",style:cursorStyle,children:\"|\"})]})]})]});}export default TextAppear;","map":{"version":3,"names":["React","useState","useEffect","useRef","TermHeader","jsx","_jsx","jsxs","_jsxs","TextAppear","_ref","commands","onComplete","currentIndex","setCurrentIndex","texts","setTexts","currentText","setCurrentText","isExpanded","setIsExpanded","cursorPosition","setCursorPosition","left","top","headerTitle","setHeaderTitle","directory","setDirectory","isComplete","setIsComplete","textRef","intervalRef","isHovered","setIsHovered","delay","ms","Promise","resolve","setTimeout","console","log","timer","clearTimeout","isProcessingRef","prev","processCommand","length","current","message","type","letterIndex","clearInterval","typewriterEffect","slice","rect","getBoundingClientRect","containerRect","parentElement","cursorX","right","cursorY","cursorStyle","position","color","animation","className","children","map","t","index","style","margin","display","ref"],"sources":["/Users/atharvakerkar/Documents/Summer Project/top/frontend/src/components/TextAppear.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './TextAppear.css';\nimport TermHeader from './TerminalHeader.js';\n\nfunction TextAppear({ commands = [], onComplete }) {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [texts, setTexts] = useState([]); // Store all completed texts\n    const [currentText, setCurrentText] = useState(''); // Text being typed out\n    const [isExpanded, setIsExpanded] = useState(false); // Start with false for animation\n    const [cursorPosition, setCursorPosition] = useState({ left: 0, top: 0 });\n    const [headerTitle, setHeaderTitle] = useState('atharvakerkar@pal-nat'); // Initial header title\n    const [directory, setDirectory] = useState('$ '); // Initial directory\n    const [isComplete, setIsComplete] = useState(false); // New state to track completion\n    const textRef = useRef(null);\n    const intervalRef = useRef(null);\n    const [isHovered, setIsHovered] = useState(false);\n\n\n    // Helper function for delay\n    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n    useEffect(() => {\n        if (isComplete) {\n            console.log('Terminal processing complete. Collapsing terminal...');\n            setTimeout(() => {\n                setIsExpanded(false); // Collapse the terminal\n            }, 10); // Optional delay to show a brief \"complete\" state\n        }\n    }, [isComplete]);    \n\n    useEffect(() => {\n        // Delay the expansion of the wrapper to trigger animation\n        const timer = setTimeout(() => {\n            console.log(\"expanding\")\n            setIsExpanded(true); // After a small delay, set expanded to true\n        }, 300); // 100ms delay (adjust if needed)\n        return () => clearTimeout(timer); // Clean up the timeout\n    }, []);\n\n    const isProcessingRef = useRef(false); // Prevent overlapping execution\n    const prev = useRef(-1); // keeps track of the previous command index\n    useEffect(() => {    \n        const processCommand = async () => {\n            if (currentIndex < commands.length && isProcessingRef.current === false && prev.current !== currentIndex) {\n                console.log(prev.current);\n                prev.current = currentIndex;\n                isProcessingRef.current = true; // Lock execution\n                console.log(\"current: \" + currentIndex);\n                const { message = '', type } = commands[currentIndex];\n\n                if ((currentIndex === 3 && commands.length != 10) || (currentIndex === 2 && commands.length === 10)) {\n                    setCurrentText('');\n                    setDirectory('atharva@data:~$ ');\n                    await delay(800);\n                }\n                \n                if ((currentIndex === 4 && commands.length != 10) || (currentIndex === 3 && commands.length === 10)) {\n                    setDirectory('atharva@data:~/atharva/menu$ ');\n                }\n\n                if ((currentIndex === 7 && commands.length != 10) || (currentIndex === 6 && commands.length === 10)) {\n                    await delay(2500);\n                }\n\n\n                if (type === 'instant') {\n                    setTexts((prev) => [...prev, message]);\n                    setCurrentIndex(currentIndex + 1); // Move to the next command\n                }\n                else if (type === 'typewriter' && message) {\n                    let letterIndex = 0;\n                    setCurrentText(directory);\n                    clearInterval(intervalRef.current);\n                    console.log('typewrite');\n\n                    await typewriterEffect(message); // Use async function for typewriter effect\n                    setCurrentIndex(currentIndex + 1);\n                    console.log('typewrite');\n\n                } else if (type === 'clear') {\n                    setTexts([]);\n                    setCurrentText('$ ');\n                    setCurrentIndex(currentIndex + 1);\n                    if (currentIndex === commands.length - 1) {\n                        setCurrentText('');\n                        setIsComplete(true);\n                        onComplete()\n                    }\n                }\n                if ((currentIndex === 3 && commands.length != 10) || (currentIndex === 2 && commands.length === 10)) {\n                    setHeaderTitle('ssh atharva@data');\n                }\n\n                isProcessingRef.current = false; // Unlock execution\n            }\n        };\n\n        processCommand();\n\n        return () => {\n            if (intervalRef.current) {\n                clearInterval(intervalRef.current);\n            }\n        };\n    }, [currentIndex, commands]);\n\n    // Helper function to handle typewriter effect with async/await\n    const typewriterEffect = async (message) => {\n        let letterIndex = 0;\n        setCurrentText(directory); // Set the initial text to the directory\n\n        // Loop through each character and simulate typing\n        for (let letterIndex = 0; letterIndex < message.length; letterIndex++) {\n            setCurrentText((prev) => directory + message.slice(0, letterIndex + 1)); // Add one letter at a time\n            await new Promise((resolve) => setTimeout(resolve, 80)); // Wait 90ms between characters\n        }\n\n        // Once all letters are typed, add the full message to the text area\n        setTexts((prev) => [...prev, directory + message]);\n        setCurrentText(directory); // Reset the current text after typing finishes\n        if (currentIndex === commands.length - 2) {\n            await delay(400);\n        }\n    };\n\n    \n    useEffect(() => {\n        if (textRef.current) {\n            // Get the bounding rect of the current text\n            const rect = textRef.current.getBoundingClientRect();\n            const containerRect = textRef.current.parentElement.getBoundingClientRect();\n            \n            // Calculate the cursor's vertical position based on the container's padding and text's bounding rect\n            const cursorX = rect.right - containerRect.left - 1;  // Horizontal position of the cursor\n            const cursorY = rect.top - containerRect.top;  // Adjust vertical position based on container\n\n            setCursorPosition({\n                left: cursorX,\n                top: cursorY\n            });\n        }\n    }, [texts, currentText]);\n\n    const cursorStyle = {\n        position: 'absolute',\n        left: cursorPosition.left,\n        top: cursorPosition.top,\n        color: 'rgb(54, 229, 150)',\n        animation: 'blink-caret 1s step-start infinite',\n    };\n\n    return (\n        <div className={`terminal-wrapper ${isExpanded ? 'expanded' : ''}`}>\n            <TermHeader headerTitle={headerTitle} />\n            <div className=\"terminal-box\">\n                {texts.map((t, index) => (\n                    <p key={index} style={{ margin: 0 }}>{t}</p> // Each command on a new line\n                ))}\n                <p style={{ margin: 0, display: 'inline' }} ref={textRef}>\n                    {currentText}\n                    {!isComplete && \n                        (<span \n                            className=\"cursor\" \n                            style={cursorStyle}\n                        >\n                        | \n                        </span>)\n                    }\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default TextAppear;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}